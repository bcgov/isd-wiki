apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "isd-wiki.fullname" . }}-config
  labels:
    {{- include "isd-wiki.labels" . | nindent 4 }}
data:
  LocalSettings.php: |
    <?php
    #
    # See docs/Configuration.md for configuration options and examples
    # of how to modify this file.
    # For more information on configuring MediaWiki, see:
    # https://www.mediawiki.org/wiki/Manual:Configuration_settings

    error_reporting( -1 );
    ini_set( 'display_errors', 1 );
    ini_set( 'display_startup_errors', 1 );

    // Add the vendor, /tmp, and images directory to PHP's open_basedir
    ini_set('open_basedir', '/var/www/html/:/var/www/html/vendor/:/var/www/html/images:/tmp:/images');

    // Load Composer autoloader
    require_once "$IP/vendor/autoload.php";

    # Database settings
    $wgDBtype = "{{ .Values.mediawiki.database.type }}";
    $wgDBserver = "patroni-isd-wiki-db";
    $wgDBname = "{{ .Values.mediawiki.database.name }}";
    $wgDBuser = "{{ .Values.mediawiki.database.user }}";
    $wgDBpassword = getenv('MEDIAWIKI_DB_PASSWORD');

    // DEBUG: Add a raw PHP connection check for detailed errors
    $conn_string = "host=$wgDBserver port=$wgDBport dbname=$wgDBname user=$wgDBuser password=$wgDBpassword";
    $conn = pg_connect($conn_string);
    if (!$conn) {
        echo "ERROR: Failed to connect to PostgreSQL: " . pg_last_error() . "\n";
        exit(1);
    } else {
        echo "SUCCESS: Raw PHP connection to PostgreSQL successful.\n";
        pg_close($conn);
    }

    # Explicitly set the temporary directory to avoid errors
    $wgTmpDirectory = "/tmp";

    # Postgres specific settings
    $wgDBport = 5432;

    # If using a prefix for database tables
    # $wgDBprefix = "";

    # This is a randomly generated secret key. It is used by MediaWiki to
    # encrypt passwords and for other security-related operations.
    # You should not share this key with anyone.
    $wgSecretKey = "{{ .Values.mediawiki.secretKey | default (randAlphaNum 32) }}"; # Generate a random key for new installations

    # Site language code, see https://www.mediawiki.org/wiki/Manual:wiki_language
    $wgLanguageCode = "en";

    # Site name
    $wgSitename = "{{ .Values.mediawiki.siteName }}";

    # This is the required setting for the domain, e.g. "https://wiki.example.com"
    $wgServer = "{{ .Values.mediawiki.serverName }}";

    # Set this to true to enable pretty URLs (e.g., /wiki/Page_title)
    # Requires web server configuration.
    $wgUsePathInfo = true;

    # The URL base path to the MediaWiki installation.
    # Example: "$wgScriptPath = \"/w\";"
    $wgScriptPath = "";

    # The URL to the MediaWiki API.
    # Example: "$wgScriptExtension = \".php\";"
    $wgScriptExtension = ".php";

    # Path to the uploads directory relative to the MediaWiki installation root.
    # Example: "$wgUploadDirectory = \"images\";"
    $wgUploadDirectory = "$wgScriptPath/images";

    # You might want to enable file uploads
    $wgEnableUploads = true;
    $wgUseImageMagick = true;
    $wgImageMagickConvertCommand = "/usr/bin/convert"; # Ensure imagemagick is installed in the container

    # Cache settings
    $wgMainCacheType = CACHE_DB;
    $wgParserCacheType = CACHE_DB;
    $wgMessageCacheType = CACHE_DB;
    # $wgMemCachedServers = [ '{{ include "isd-wiki.fullname" . }}-memcached:11211' ]; # If you use memcached as a subchart

    # Debugging settings (useful for development)
    $wgShowExceptionDetails = true;
    # $wgDebugToolbar = true;

    # ResourceLoader
    $wgResourceLoaderMaxage = [
        'default' => 3600 * 24 * 7, // 1 week
        'minor' => 3600 * 24 * 7, // 1 week
        'major' => 3600 * 24 * 7, // 1 week
    ];