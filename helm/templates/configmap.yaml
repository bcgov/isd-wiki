apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "isd-wiki.fullname" . }}-config
  labels:
    {{- include "isd-wiki.labels" . | nindent 4 }}
data:
  LocalSettings.php: |
    <?php
    #
    # See docs/Configuration.md for configuration options and examples
    # of how to modify this file.
    # For more information on configuring MediaWiki, see:
    # https://www.mediawiki.org/wiki/Manual:Configuration_settings

    error_reporting( -1 );
        ini_set( 'display_errors', 1 );
        ini_set( 'display_startup_errors', 1 );

    // Set a correct open_basedir to allow access to all necessary files.
    ini_set('open_basedir', '/var/www/html/:/var/www/html/vendor/:/var/www/html/images:/tmp');

    // Load Composer autoloader
    require_once "$IP/vendor/autoload.php";

    # Server configuration
    $wgServer = "{{ .Values.mediawiki.serverName }}";

    # Database settings
    $wgDBtype = "{{ .Values.mediawiki.database.type }}";
    $wgDBserver = "{{ .Values.mediawiki.database.host }}";
    $wgDBname = "{{ .Values.mediawiki.database.name }}";
    $wgDBuser = "{{ .Values.mediawiki.database.user }}";

    # Read db passwordfrom mounted secret
    # $wgDBpassword = file_get_contents("/var/run/secrets/{{ include "isd-wiki.fullname" . }}-db-credentials/password"); 

    # Read db password from environment
    $wgDBpassword = getenv('MEDIAWIKI_DB_PASSWORD');

    # Set a dedicated, writable directory for temporary files
    # $wgTmpDirectory = "/var/www/html/tmp";

    # Postgres specific settings
    $wgDBport = 5432;

    # If using a prefix for database tables
    # $wgDBprefix = "";

    # This is a randomly generated secret key. It is used by MediaWiki to
    # encrypt passwords and for other security-related operations.
    # Generate a random key for new installations
    $wgSecretKey = "{{ .Values.mediawiki.secretKey | default (randAlphaNum 32) }}"; 

    # Site language code, see https://www.mediawiki.org/wiki/Manual:wiki_language
    $wgLanguageCode = "en";

    # Site name
    $wgSitename = "{{ .Values.mediawiki.siteName }}";

    # Set this to true to enable pretty URLs (e.g., /wiki/Page_title)
    # Requires web server configuration.
    $wgUsePathInfo = true;

    # The URL base path to the MediaWiki installation.
    # Example: "$wgScriptPath = \"/w\";"
    $wgScriptPath = "";

    # The URL to the MediaWiki API.
    # Example: "$wgScriptExtension = \".php\";"
    $wgScriptExtension = ".php";

    # Path to the uploads directory relative to the MediaWiki installation root.
    # Example: "$wgUploadDirectory = \"images\";"
    $wgUploadDirectory = "$wgScriptPath/images";

    # You might want to enable file uploads
    $wgEnableUploads = true;
    $wgUseImageMagick = true;
    $wgImageMagickConvertCommand = "/usr/bin/convert"; # Ensure imagemagick is installed in the container

    # Cache settings
    $wgMainCacheType = CACHE_DB;
    $wgParserCacheType = CACHE_DB;
    $wgMessageCacheType = CACHE_DB;
    # $wgMemCachedServers = [ '{{ include "isd-wiki.fullname" . }}-memcached:11211' ];

    # Debugging settings (useful for development)
    $wgShowExceptionDetails = true;
    $wgDebugToolbar = true;

    # ResourceLoader
    $wgResourceLoaderMaxage = [
        'default' => 3600 * 24 * 7, // 1 week
        'minor' => 3600 * 24 * 7, // 1 week
        'major' => 3600 * 24 * 7, // 1 week
    ];