apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "isd-wiki.fullname" . }}
  labels:
    {{- include "isd-wiki.labels" . | nindent 4 }}
spec:
  {{- if not .Values.mediawiki.autoscaling.enabled }}
  replicas: {{ .Values.mediawiki.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "isd-wiki.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # 1. Vault injector configuration
        vault.hashicorp.com/agent-inject: 'true'
        # set to 'true' if you are going to connect and query vault from your application
        vault.hashicorp.com/agent-inject-token: 'false' 
        # this makes sure the secret vault will only change during pod restart
        vault.hashicorp.com/agent-pre-populate-only: 'true' 
        # Must match cluster. Use one of: k8s-silver, k8s-gold, k8s-golddr, k8s-emerald
        vault.hashicorp.com/auth-path: auth/k8s-{{ .Values.global.cluster }}  
        vault.hashicorp.com/namespace: platform-services
        # licenseplate-nonprod or licenseplate-prod are your options
        vault.hashicorp.com/role: {{ .Values.global.vault.role }} 
        # - The value is the path in Vault where the secret is located.
        vault.hashicorp.com/agent-inject-secret-isd-db-user: {{ .Values.global.licenseplate }}-{{ .Values.global.vault.engine }}/{{ .Values.global.vault.secret }}
        # - The template Vault Agent should use for rendering a secret:
        vault.hashicorp.com/agent-inject-template-secrets: |
          {{`{{- with secret `}}"{{ .Values.global.licenseplate }}-{{ .Values.global.vault.engine }}/{{ .Values.global.vault.secret }}"{{` }}
          {{- range $k, $v := .Data.data }}
          {{ $k }}={{ $v }}{{ end -}}
          {{- end `}} }}
      {{- with .Values.mediawiki.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "isd-wiki.labels" . | nindent 8 }}
        {{- include "isd-wiki.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.mediawiki.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.global.serviceAccount.name }}
      securityContext:
        {{- toYaml .Values.mediawiki.podSecurityContext | nindent 8 }}
      containers:
        - name: mediawiki
          securityContext:
            {{- toYaml .Values.mediawiki.securityContext | nindent 16 }}
          image: "{{ .Values.mediawiki.image.repository }}:{{ .Values.mediawiki.image.tag }}"
          imagePullPolicy: {{ .Values.mediawiki.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          # command: ["/bin/sh"]
          # args:
          #   - -c
          #   - |
          #     echo "INFO: container starting entrypoint..."
          #     if [ -s /vault/secrets/isd-db-user ]; then
          #       SECRET_CONTENT=$(cat /vault/secrets/isd-db-user)
          #       export MEDIAWIKI_DB_PASSWORD=$(echo "${SECRET_CONTENT}" | tr -d '\n\r ')
          #       echo "INFO: Password loaded from Vault secret. Length: ${#MEDIAWIKI_DB_PASSWORD}"
          #     else
          #       echo "ERROR: /vault/secrets/isd-db-user is empty or does not exist. Exiting."
          #       exit 1
          #     fi

          #     if [ -z "${MEDIAWIKI_DB_PASSWORD}" ]; then
          #       echo "ERROR: MEDIAWIKI_DB_PASSWORD variable is empty after loading from secret. Exiting."
          #       exit 1
          #     fi

          #     # echo "INFO: Running custom startup tasks (/startuptasks.sh)..."
          #     # /startuptasks.sh # Execute your existing startup tasks script

          #     # echo "INFO: Executing original MediaWiki entrypoint (/entrypoint.sh) with CMD..."
          #     # exec docker-entrypoint.sh
          #     exec php-fpm
          env:
            - name: MEDIAWIKI_DB_TYPE
              value: {{ .Values.mediawiki.database.type | quote }}
            - name: MEDIAWIKI_DB_HOST
              value: {{ .Values.mediawiki.database.host | default (printf "%s-mysql" (include "isd-wiki.fullname" .)) | quote }} # Adjust for other DBs
            - name: MEDIAWIKI_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: patroni-{{ include "isd-wiki.fullname" . }}
                  key: app-db-name
            - name: MEDIAWIKI_DB_USER
              valueFrom:
                secretKeyRef:
                  name: patroni-{{ include "isd-wiki.fullname" . }}
                  key: app-db-username
            - name: MEDIAWIKI_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: patroni-{{ include "isd-wiki.fullname" . }}
                  key: app-db-password
            - name: MEDIAWIKI_SITE_NAME
              value: {{ .Values.mediawiki.siteName | quote }}
            # Add more environment variables for MediaWiki configuration as needed
            # (e.g., for upload directory, extensions, etc.)
          volumeMounts:
            - name: mediawiki-data
              mountPath: /var/www/data
            - name: mediawiki-html
              mountPath: /var/www/html
            - name: mediawiki-config
              mountPath: /var/www/html/LocalSettings.php
              subPath: LocalSettings.php # Mount the config file directly
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.mediawiki.resources | nindent 16 }}
      volumes:
        - name: mediawiki-data
          persistentVolumeClaim:
            claimName: {{ include "isd-wiki.fullname" . }}-data
        - name: mediawiki-html
          persistentVolumeClaim:
            claimName: {{ include "isd-wiki.fullname" . }}-html
        - name: mediawiki-config
          configMap:
            name: {{ include "isd-wiki.fullname" . }}-config
      {{- with .Values.mediawiki.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mediawiki.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.mediawiki.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}