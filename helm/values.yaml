# Default values for mediawiki.
# This is a YAML-formatted file.
# Declare variables to be passed into the templates.

global:
  nameOverride: ""
  fullnameOverride: ""
  licenseplate: "abcdef"
  cluster: "silver"
  serviceAccount:
    name: "abcdef-vault"
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
  # Inject Keycloak JSON multi-value config from a Vault secret
  # See details: https://digital.gov.bc.ca/technology/cloud/private/products-tools/vault/
  vault:
    # Vault role for this service
    role: "abcdef-nonprod" 
    # Secrets path in container
    secret: "secrets-name"
    # Vault engine to use
    engine: "nonprod"

mediawiki:

  replicaCount: 1

  image:
    repository: ghcr.io/bcgov/isd-wiki
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

# These values would come from the Dockerfile's ENV variables
  # or from the official MediaWiki Docker image documentation.
  # For now, let's assume direct configuration.
  # the'll likely map these to environment variables in the deployment.yaml
  database:
    type: postgresql
    host: "patroni-isd-wiki"
    port: 5432
    name: mediawiki
    user: mediawiki
    password: ""
    rootPassword: ""

  # Configuration for LocalSettings.php
  siteName: "My MediaWiki"
  adminUser: "admin"
  adminPassword: "" # Set this securely
  # Add more MediaWiki-specific settings here, which the can inject into LocalSettings.php


  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If the do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

patroni:

  # # Default values for patroni.
  # # This is a YAML-formatted file.
  # # Declare variables to be passed into your templates.

  # replicaCount: 1

  # image:
  #   repository: artifacts.developer.gov.bc.ca/bcgov-docker-local
  #   pullPolicy: Always
  #   # Overrides the image name whose default is the chart name.
  #   name: patroni-postgres
  #   # Overrides the image tag whose default is the chart appVersion.
  #   tag: ~

  # imagePullSecrets: []
  # nameOverride: ~
  # fullnameOverride: ~

  # credentials:
  #   # # Username of replication account
  #   # replicationUsername: replication
  #   # # Username of superuser account
  #   # superuserUsername: postgres
  #   # Application database name
  #   appDbName: mediawiki
  #   # Username of application account
  #   appDbUserame: mediawiki
  # # To use an existing secret instead of having the chart generate one, provide the name of the existing secret here.
  # # Note that this secret must be formatted the same way as the secret generated by the chart.
  # # Leave it blank to allow the helm chart to generate a secret for you.
  # secretOverride: ~

  # serviceAccount:
  #   # Specifies whether a service account should be created
  #   create: true
  #   # Annotations to add to the service account
  #   annotations: {}
  #   # The name of the service account to use.
  #   # If not set and create is true, a name is generated using the fullname template
  #   name: ~

  # podAnnotations: {}

  # podAntiAffinity: true

  # podSecurityContext: {}
  #   # fsGroup: 2000

  # securityContext: {}
  #   # capabilities:
  #   #   drop:
  #   #   - ALL
  #   # readOnlyRootFilesystem: true
  #   # runAsNonRoot: true
  #   # runAsUser: 1000

  # service:
  #   enableReadOnly: true
  #   # Annotations to add to the service account
  #   annotations: {}
  #   type: ClusterIP
  #   port: 5432
  #   portName: db

  # networkPolicy:
  #   enabled: true

  # probes:
  #   liveness:
  #     enabled: true
  #   readiness:
  #     enabled: true

  # resources:
  #   # We usually recommend not to specify default resources and to leave this as a conscious
  #   # choice for the user. This also increases chances charts run on environments with little
  #   # resources, such as Minikube. If you do want to specify resources, uncomment the following
  #   # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #   limits:
  #     cpu: 500m
  #     memory: 512Mi
  #   requests:
  #     cpu: 20m
  #     memory: 256Mi

  # persistentVolume:
  #   enabled: true
  #   accessModes:
  #     - ReadWriteOnce
  #   annotations: {}
  #   mountPath: "/home/postgres/pgdata"
  #   size: 2Gi
  #   storageClass: "netapp-block-standard"


  replicaCount: 3

  image:
    # see https://github.com/zalando/spilo/releases
    repository: ghcr.io/zalando/spilo-15
    pullPolicy: Always
    tag: 3.2-p1

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  postgresMajorVersion: 15

  # Credentials used by Patroni
  credentials:
    existingSecret: false
    superuser:
      username: postgres
      password:
    admin:
      username: admin
      password:
    standby:
      username: standby
      password:

  # Additional users and databases; each user will have full privileges on the same name of the database
  # leave the password empty to generate the password automatically
  # example
  # additionalCredentials:
  #   - username: myapp
  #     password:
  additionalCredentials: []

  # set to allow clients to connect without SSL enabled.
  allowNoSSL: true

  # Distribution Configuration stores
  # Please note that only one of the following stores should be enabled.
  kubernetes:
    roleLabel: "spilo-role"
    dcs:
      enable: true
    configmaps:
      enable: true

  etcd:
    enable: false
    deployChart: false
    # If not deploying etcd chart, fill-in value for etcd service
    # <service>.<namespace>.svc.cluster.local
    host:
    # Leave blank to use vendored etcd chart
    discovery:
  zookeeper:
    enable: false
    deployChart: false
    # If not deploying etcd chart, fill-in list of ZooKeeper members in format:
    # 'host1:port1','host2:port2','etc...'
    hosts:
  consul:
    enable: false
    deployChart: false
    # Leave blank to use vendored consul chart
    hosts:

  # Extra custom environment variables.
  # see https://github.com/zalando/spilo/blob/master/ENVIRONMENT.rst#environment-configuration-settings
  env: {}

  walG:
    # Specifies whether Wal-G should be enabled
    enabled: false
    # Cron schedule for doing base backups
    scheduleCronJob: 00 01 * * *
    # Amount of base backups to retain
    retainBackups: 2
    # Maximum size of the WAL segments accumulated after the base backup to
    # consider WAL-G restore instead of pg_basebackup
    backupThresholdMegabytes: 1024
    # Maximum ratio (in percents) of the accumulated WAL files to the base backup
    # to consider WAL-G restore instead of pg_basebackup
    backupThresholdPercentage: 30

    # see https://github.com/wal-g/wal-g/blob/master/docs/STORAGES.md
    storage: pvc
    pvc:
      size: 500Mi
      storageClass: netapp-file-backup
      mountPath: /home/postgres/backups

  rbac:
    # Specifies whether RBAC resources should be created
    create: true

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  persistentVolume:
    enabled: true
    size: 1G
    storageClass: netapp-block-standard
    subPath: ""
    mountPath: /home/postgres/pgdata
    annotations: {}
    accessModes:
      - ReadWriteOnce

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinityTemplate: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: "kubernetes.io/hostname"
          labelSelector:
            matchLabels: {{ include "patroni.selectorLabels" . | nindent 10 }}

  affinity: {}
  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  networkPolicy:
    enabled: true

  podDisruptionBudget:
    enabled: true
    minAvailable: 1
    maxUnavailable:

  standby:
    enabled: false
    host:
    port: 5433

  transportServerClaim:
    enabled: false
    interval: 10
    timeout: 10
