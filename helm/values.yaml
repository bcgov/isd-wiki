# Default values for mediawiki.
# This is a YAML-formatted file.
# Declare variables to be passed into the templates.

global:
  nameOverride: ""
  fullnameOverride: ""
  licenseplate: "abcdef"
  cluster: "silver"
  serviceAccount:
    name: "abcdef-vault"
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
  # Inject Keycloak JSON multi-value config from a Vault secret
  # See details: https://digital.gov.bc.ca/technology/cloud/private/products-tools/vault/
  vault:
    # Vault role for this service
    role: "abcdef-nonprod" 
    # Secrets path in container
    secret: "secrets-name"
    # Vault engine to use
    engine: "nonprod"

mediawiki:

  replicaCount: 1

  image:
    repository: ghcr.io/bcgov/isd-wiki
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

# These values would come from the Dockerfile's ENV variables
  # or from the official MediaWiki Docker image documentation.
  # For now, let's assume direct configuration.
  # the'll likely map these to environment variables in the deployment.yaml
  database:
    type: postgresql
    host: "patroni-isd-wiki"
    port: 5432
    name: mediawiki
    user: mediawiki
    password: ""
    rootPassword: ""

  # Configuration for LocalSettings.php
  siteName: "My MediaWiki"
  adminUser: "admin"
  adminPassword: "" # Set this securely
  # Add more MediaWiki-specific settings here, which the can inject into LocalSettings.php


  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If the do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  affinity: {}

patroni:

  # Default values for patroni.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  replicaCount: 1

  image:
    repository: artifacts.developer.gov.bc.ca/bcgov-docker-local
    pullPolicy: Always
    # Overrides the image name whose default is the chart name.
    name: patroni-postgres
    # Overrides the image tag whose default is the chart appVersion.
    tag: ~

  imagePullSecrets: []
  nameOverride: ~
  fullnameOverride: ~

  credentials:
    # # Username of replication account
    # replicationUsername: replication
    # # Username of superuser account
    # superuserUsername: postgres
    # Application database name
    appDbName: mediawiki
    # Username of application account
    appDbUserame: mediawiki
  # To use an existing secret instead of having the chart generate one, provide the name of the existing secret here.
  # Note that this secret must be formatted the same way as the secret generated by the chart.
  # Leave it blank to allow the helm chart to generate a secret for you.
  secretOverride: ~

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ~

  podAnnotations: {}

  podAntiAffinity: true

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    enableReadOnly: true
    # Annotations to add to the service account
    annotations: {}
    type: ClusterIP
    port: 5432
    portName: db

  networkPolicy:
    enabled: true

  probes:
    liveness:
      enabled: true
    readiness:
      enabled: true

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 20m
      memory: 256Mi

  persistentVolume:
    enabled: true
    accessModes:
      - ReadWriteOnce
    annotations: {}
    mountPath: "/home/postgres/pgdata"
    size: 2Gi
    storageClass: "netapp-block-standard"


