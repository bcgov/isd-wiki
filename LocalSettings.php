<?php
# This is a base LocalSettings.php for a Dockerized MediaWiki.
# It will likely be overridden by a Kubernetes ConfigMap in production.

# Enable extensions (you should enable the ones you installed in the Dockerfile)
wfLoadExtension( 'VisualEditor' );
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
# Add any other extensions you install via the Dockerfile

# You will need to set these via environment variables or a mounted ConfigMap in Kubernetes:
# Database settings
# $wgDBtype = "mysql"; # or "postgres"
# $wgDBserver = "your-db-host";
# $wgDBname = "your-db-name";
# $wgDBuser = "your-db-user";
# $wgDBpassword = "your-db-password";

# Site details
# $wgSitename = "My Docker Wiki";
# $wgSecretKey = "your-long-random-secret-key"; # Generate securely!

# Upload settings
# $wgEnableUploads = true;
# $wgUseImageMagick = true;
# $wgImageMagickConvertCommand = "/usr/bin/convert";

# If you need specific settings that are always present, put them here.
# Otherwise, rely on environment variables and mounted ConfigMaps from your Helm chart.

# IMPORTANT: The official MediaWiki Docker image's entrypoint script
# (docker-entrypoint.sh) will attempt to perform initial configuration
# and migration when the container starts. Ensure you understand its behavior
# and how it interacts with LocalSettings.php, especially if you mount your own.
# Typically, if a LocalSettings.php exists, it won't overwrite it but might modify it.
# The best practice is to manage configuration via a ConfigMap.

# Include the default LocalSettings.php generated by the entrypoint (if present and needed)
# This can sometimes be important if the base image creates a scaffold.
# However, for a fully managed LocalSettings.php via ConfigMap, this might not be necessary.
# @include_once "$IP/includes/DefaultSettings.php";
# require_once "$IP/LocalSettings.php"; # This line is often removed if you manage the whole file